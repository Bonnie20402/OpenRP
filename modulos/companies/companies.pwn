

    /*
        Explaination
        All companies should have a safe, that is able to be robbed by a citizen level 5+ OR a player
            in a bad organization (gangster,mafia,...)
        Upon entering a company, the player is asked if he wants to get in the company or invade their safe.

        The stolen money should be 25% of the company's safe + more 50% of that generated by the server
        
    Companies
    The Market: Profits off sending products such as food, water , phones, radios, .... Has interior
    The Dump: Profits off trashman workers. No interior
    Ammu Nation: Profits off selling guns. Has interior
    Cars'n'Fix : Profits off repairing and SHIELDING vehicles. No interior
    Gasoline : Profits off fueling vehicles No interior
    License Center: Profits off giving player's driving licenses. Has interiro
    Eletricity: Gets money from player's houses eletricity. No interior //TODO Hosue System
    Gas: Gets money from player's houses gas. No interior //TODO House system
    Water: Gets money from player's hosues water. No Interior // TODO house system
*/
/*
    Interior Modules
                */
#include "modulos\companies\interior\interiordialogs.pwn" // -*- INTERIOR DIALOGS / SHOPPING MENUS -*- 
#include "modulos\companies\interior\ammonation1.pwn" // Ammo nation 1
#include "modulos\companies\interior\market1.pwn" // market perfeitura
#include "modulos\companies\interior\rest1.pwn" // Cluck bell
#include "modulos\companies\interior\rest2.pwn" // Burger king
#include "modulos\companies\interior\cdl_ls.pwn" // Centro de licenças LOS SANTOS
/*
    Co-modules
                */
#include "modulos\companies\companymanager.pwn"
#include "modulos\companies\companysafe.pwn"
#include <YSI_Coding\y_hooks>

#define COMPANYBASEPRICE 5000 // for-sale company price.

new gEnteringCompany[MAX_PLAYERS]; // Handles the company players are entering
/*
    Prepares companies table
    Should be called on server init
                                    */
public PrepareCompaniesTable() {
    new query[255];
    mysql_format(mysql,query,255,"CREATE TABLE IF NOT EXISTS companies (rowid INT NOT NULL PRIMARY KEY AUTO_INCREMENT,owner VARCHAR(64),coowner VARCHAR(64),name VARCHAR(64),description VARCHAR(64),interiorid INT,cash INT,entrancefee INT,mapicon INT, ix FLOAT, iy FLOAT,iz FLOAT,x FLOAT, y FLOAT,z FLOAT)");
    mysql_query(mysql,query,false);
    PrepareLoadCompanies();
    return 1;

}
/*
    Loads companies into ram
    Pre-clears all of the loaded companies, so it's reload-friendly
                                                                    */
public PrepareLoadCompanies() {
    new query[255];
    mysql_format(mysql,query,255,"SELECT * FROM companies");
    mysql_pquery(mysql,query,"FinishLoadCompanies","");
    return 1;
}
public FinishLoadCompanies() {
    new qtd=0;
    for(new i=0;i<sizeof(gCompanies);i++) {
        gCompanies[i][COMPANY_ROWID]=0;
        DestroyDynamic3DTextLabel(gCompanies[i][COMPANY_EXTTEXT]);
        DestroyDynamicPickup(gCompanies[i][COMPANY_EXTPICKUPID]);
        DestroyDynamic3DTextLabel(gCompanies[i][COMPANY_INTTEXT]);
        DestroyDynamicPickup(gCompanies[i][COMPANY_INTPICKUPID]);
        DestroyDynamicMapIcon(gCompanies[i][COMPANY_ICONID]);
        gCompanies[i][COMPANY_ICONID]=0;
    }
    for(new i=0;i<cache_num_rows();i++) {
        new rowid;
        cache_get_value_index_int(i,0,rowid);
        cache_get_value_index_int(i,0,gCompanies[rowid][COMPANY_ROWID]);
        cache_get_value_index(i,1,gCompanies[rowid][COMPANY_OWNER]);
        cache_get_value_index(i,2,gCompanies[rowid][COMPANY_COOWNER]);
        cache_get_value_index(i,3,gCompanies[rowid][COMPANY_NAME]);
        cache_get_value_index(i,4,gCompanies[rowid][COMPANY_DESCRIPTION]);
        cache_get_value_index_int(i,5,gCompanies[rowid][COMPANY_INTERIORID]);
        cache_get_value_index_int(i,6,gCompanies[rowid][COMPANY_CASH]);
        cache_get_value_index_int(i,7,gCompanies[rowid][COMPANY_ENTRANCEFEE]);
        cache_get_value_index_int(i,8,gCompanies[rowid][COMPANY_MAPICON]);
        cache_get_value_index_float(i,9,gCompanies[rowid][COMPANY_INTCOORDS][0]);
        cache_get_value_index_float(i,10,gCompanies[rowid][COMPANY_INTCOORDS][1]);
        cache_get_value_index_float(i,11,gCompanies[rowid][COMPANY_INTCOORDS][2]);
        cache_get_value_index_float(i,12,gCompanies[rowid][COMPANY_EXTCOORDS][0]);
        cache_get_value_index_float(i,13,gCompanies[rowid][COMPANY_EXTCOORDS][1]);
        cache_get_value_index_float(i,14,gCompanies[rowid][COMPANY_EXTCOORDS][2]);
        UpdateCompanyTextLabel(rowid);
        qtd++;
    }
    printf("[companies.pwn] %d companies have been loaded",qtd);
    CompaniesInit(); // Start interiors
    return 1;
}
/*
    Adds a comapny to the database
                                    */
public PrepareAddCompany(const name[],interiorid,mapicon,Float:ix,Float:iy,Float:iz,Float:x,Float:y,Float:z) {
    new String:query[512];
    mysql_format(mysql,query,512,\
    "INSERT INTO companies (owner, coowner, name, description, interiorid, cash, entrancefee,mapicon,ix,iy,iz,x,y,z)\
     VALUES ('%s', '%s', '%s', '%s', %d, %d, %d, %d,%f, %f, %f,%f,%f,%f)",\
     "Ninguém","Ninguém",name,"Sem descrição",interiorid,0,0,mapicon,ix,iy,iz,x,y,z);
    mysql_pquery(mysql,query,"FinishAddCompany","");
    SendStaffMessage(-1,"A criar Company...");
    printf("%s",query);
    return 1;
}
public FinishAddCompany() {
    if(!cache_affected_rows()) {
        SendStaffMessage(-1,"Erro ao criar Company");
        return 1;
    }
    SendStaffMessage(-1,"Nova Empresa Criada!");
    PrepareLoadCompanies();
    return 1;
}

/*
    Removes a company from sql database
                                        */
public PrepareRemoveCompany(rowid) {
    if(!rowid)return 0;
    if(!IsValidCompany(rowid)) {
        SendStaffMessage(-1,"Company ROWID Invalida");
    }
    new xquery[255];
    SendStaffMessage(-1,"A remover company....");
    mysql_format(mysql,xquery,255,"DELETE FROM companies WHERE rowid = %d",rowid);
    mysql_pquery(mysql,xquery,"FinishRemoveCompany","i",rowid);
    return 1;
}
public FinishRemoveCompany(rowid) {
    printf("[companies.pwn] Company ID %d deleted",rowid);
    SendStaffMessage(-1,"Company eliminada");
    PrepareLoadCompanies();
    return 1;
}

/*
    Checks if given rowid (companyid) is valid or not
    returns True if so, false if not
                                            */
public IsValidCompany(rowid) {
    for(new i=0;i<sizeof(gCompanies);i++) {
        if(!rowid) return 0;
        if(rowid==gCompanies[i][COMPANY_ROWID])return 1;
    }
    return 0;
}
/*
    Initiates map icons thru Streamer
    Dynamic, linked to all players, of type MAPicon_GLOBAL */
public CreateCompanyMapIcons() {
    for(new i=0;i<sizeof(gCompanies);i++) {
        if(IsValidCompany(gCompanies[i][COMPANY_ROWID])) {
            gCompanies[i][COMPANY_ICONID]=CreateDynamicMapIcon(gCompanies[i][COMPANY_EXTCOORDS][0],gCompanies[i][COMPANY_EXTCOORDS][1],gCompanies[i][COMPANY_EXTCOORDS][2],gCompanies[i][COMPANY_MAPICON],-1,-1,-1,-1,-1,MAPICON_GLOBAL);
        }
    }
    return 1;
}
/*
    Assigns a company's Exterior coordenates by reference
    Assigns -1 if invalid company
                                                        */
public GetCompanyExtLocationPtrs(rowid,&Float:x,&Float:y,&Float:z) {
    if(IsValidCompany(rowid)) {
        x=gCompanies[rowid][COMPANY_EXTCOORDS][0];
        y=gCompanies[rowid][COMPANY_EXTCOORDS][1];
        z=gCompanies[rowid][COMPANY_EXTCOORDS][2];
        return 1;
    }
    x=-1;
    y=-1;
    z=-1;
    return 1;
}
/*
    Assigns a company's Interior coordenates by reference
    Assigns -1 if invalid company
                                                        */
public GetCompanyIntLocationPtrs(rowid,&Float:x,&Float:y,&Float:z) {
    if(IsValidCompany(rowid)) {
        x=gCompanies[rowid][COMPANY_INTCOORDS][0];
        y=gCompanies[rowid][COMPANY_INTCOORDS][1];
        z=gCompanies[rowid][COMPANY_INTCOORDS][2];
        return 1;
    }
    x=-1;
    y=-1;
    z=-1;
    return 1;
}
/*
    Returns a valid company interior id
    Returns -1 if invalid company
                                */
public GetCompanyInteriorId(rowid) {
    if(IsValidCompany(rowid)) {
        return gCompanies[rowid][COMPANY_INTERIORID];
    }
    return -1;
}
public GetCompanyIdFromName(const name[]) {
    for(new i;i<sizeof(gCompanies);i++) {
        if(IsValidCompany(i)) {
            if(!strcmp(name,gCompanies[i][COMPANY_NAME]))return i;
        }
    }
    return 0;
}
/*

    Returns the distance from the nearest company of playerid
    Has logic if the player is in a interior and not.
    WARNING - Returns -1 if no companies are created
                                                */
public GetPlayerNearestCompanyPointers(playerid,&rowid,&Float:distance) {
    new Float:x,Float:y,Float:z,Float:thisDist,lowestRow,Float:lowestDist;
    lowestDist=-1.0;
    for(new i;i<sizeof(gCompanies);i++) {
        if(IsValidCompany(i)) {
            if(GetPlayerVirtualWorld(playerid))GetCompanyIntLocationPtrs(i,x,y,z);
            else GetCompanyExtLocationPtrs(i,x,y,z);
            thisDist=GetPlayerDistanceFromPoint(playerid,x,y,z);
            if(lowestDist== -1.0) {
                lowestDist=thisDist;
                lowestRow=i;
            }
            else if(thisDist<lowestDist) {
                lowestDist=thisDist;
                lowestRow=i;
            }
        }
    }
    distance=lowestDist;
    rowid=lowestRow;
    return 1;
} 

/*
    Saves a single company
                            */
forward PrepareSaveCompany(rowid);
public PrepareSaveCompany(rowid) {
    new query[512];
    mysql_format(mysql,query,512,"UPDATE companies SET owner = '%s', coowner = '%s', name = '%s', description = '%s',interiorid = %d, cash = %d, entrancefee = %d, mapicon = %d,ix = %f, iy = %f, iz = %f, x = %f, y = %f, z = %f WHERE rowid = %d",gCompanies[rowid][COMPANY_OWNER],gCompanies[rowid][COMPANY_COOWNER],gCompanies[rowid][COMPANY_NAME],gCompanies[rowid][COMPANY_DESCRIPTION],gCompanies[rowid][COMPANY_INTERIORID],gCompanies[rowid][COMPANY_CASH],gCompanies[rowid][COMPANY_ENTRANCEFEE],gCompanies[rowid][COMPANY_MAPICON],gCompanies[rowid][COMPANY_INTCOORDS][0],gCompanies[rowid][COMPANY_INTCOORDS][1],gCompanies[rowid][COMPANY_INTCOORDS][2],gCompanies[rowid][COMPANY_EXTCOORDS][0],gCompanies[rowid][COMPANY_EXTCOORDS][1],gCompanies[rowid][COMPANY_EXTCOORDS][2],rowid);
    mysql_pquery(mysql,query,"FinishSaveCompany","i",rowid);
    return 1;
}
forward FinishSaveCompany(rowid);
public FinishSaveCompany(rowid) {
    if(cache_affected_rows()) {
        printf("[companies.pwn] The company ID %d has been saved",rowid); 
        return 1;
    }
    printf("[companies.pwn] Could not save company ID %d. - no affected rows",rowid);
    return 1;
}
/*
    Updates all of the current loaded companies' text labels
    with the latest values stored in ram
                                                        */
forward UpdateCompanyTextLabel(rowid);
public UpdateCompanyTextLabel(rowid) {
    DestroyDynamicPickup(gCompanies[rowid][COMPANY_EXTPICKUPID]);
    DestroyDynamicPickup(gCompanies[rowid][COMPANY_INTPICKUPID]);
    DestroyDynamic3DTextLabel(gCompanies[rowid][COMPANY_EXTTEXT]);
    DestroyDynamic3DTextLabel(gCompanies[rowid][COMPANY_INTTEXT]);
    new text[1024];
    if(!strcmp(gCompanies[rowid][COMPANY_OWNER],DONO_NULL))format(text,1024,"Esta empresa está á venda\n%s[%d]\nPreço: R$%d\nAperte Y para adquirir",gCompanies[rowid][COMPANY_NAME],gCompanies[rowid][COMPANY_ROWID],COMAPNYBASEPRICE);
    else format(text,sizeof(text),"%s [%d]\n%s\nDono: %s\nSub-Dono: %s\nCofre: R$%d\nTaxa de Entrada: R$%d\nAperte Y para entrar",gCompanies[rowid][COMPANY_NAME],gCompanies[rowid][COMPANY_ROWID],gCompanies[rowid][COMPANY_DESCRIPTION],gCompanies[rowid][COMPANY_OWNER],gCompanies[rowid][COMPANY_COOWNER],gCompanies[rowid][COMPANY_CASH],gCompanies[rowid][COMPANY_ENTRANCEFEE]);
    gCompanies[rowid][COMPANY_EXTTEXT]=CreateDynamic3DTextLabel(text,-1,gCompanies[rowid][COMPANY_EXTCOORDS][0],gCompanies[rowid][COMPANY_EXTCOORDS][1],gCompanies[rowid][COMPANY_EXTCOORDS][2],25.0);
    gCompanies[rowid][COMPANY_EXTPICKUPID] = CreateDynamicPickup(19133, 1,gCompanies[rowid][COMPANY_EXTCOORDS][0],gCompanies[rowid][COMPANY_EXTCOORDS][1],gCompanies[rowid][COMPANY_EXTCOORDS][2]);
    format(text,1024,"%s[%d]\nAperte Y para sair!",gCompanies[rowid][COMPANY_NAME],gCompanies[rowid][COMPANY_ROWID]);
    if(gCompanies[rowid][COMPANY_ROWID]) { // world id
        gCompanies[rowid][COMPANY_INTTEXT]=CreateDynamic3DTextLabel(text,-1,gCompanies[rowid][COMPANY_INTCOORDS][0],gCompanies[rowid][COMPANY_INTCOORDS][1],gCompanies[rowid][COMPANY_INTCOORDS][2],25.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,rowid,gCompanies[rowid][COMPANY_INTERIORID]);
        gCompanies[rowid][COMPANY_INTPICKUPID] = CreateDynamicPickup(19133, 1,gCompanies[rowid][COMPANY_INTCOORDS][0],gCompanies[rowid][COMPANY_INTCOORDS][1],gCompanies[rowid][COMPANY_INTCOORDS][2],rowid,gCompanies[rowid][COMPANY_INTERIORID]);
    }
    return 1;
}
/*
    Initializes map icons and company interior pickups/texts
                                                            */
forward CompaniesInit();
public CompaniesInit() {
    CreateCompanyMapIcons();
    CompanySafeInit();
    Market1Init();
    Ammunation1Init();
    Rest1Init();
    Rest2Init();
    Cdl_lsInit(); // Centro de licenças LS
    return 1;
}


/*
    Gets a company's entrance fee
    Returns -1 if invalid company is provided
                                                */
stock GetCompanyEntranceFee(rowid) {
    if(IsValidCompany(rowid)){
        return gCompanies[rowid][COMPANY_ENTRANCEFEE];
    }
    return -1;
}
/*
    Gets a company's safe cash
    Returns -1 if invalid company is provided
                                                */
stock Int:GetCompanyCash(rowid) {
    if(IsValidCompany(rowid)) {
        return gCompanies[rowid][COMPANY_CASH];
    }
    return -1;
}
/*
    Check if given playerid is a company owner
                                                */
stock IsPlayerCompanyOwner(playerid,rowid) {
    if(IsValidCompany(rowid)) {
        if(!strcmp(GetPlayerNameEx(playerid),gCompanies[rowid][COMPANY_OWNER]))return 1;
    }
    return 0;
}
/*
    Gets a company's co-owner nickname
    Returns "null" if invalid company is provided
                                                */
stock IsPlayerCompanyCoowner(playerid,rowid) {
    if(IsValidCompany(rowid)) {
        printf("NAME: %s STRING: %s",GetPlayerNameEx(playerid),gCompanies[rowid][COMPANY_COOWNER]);
        if(!strcmp(GetPlayerNameEx(playerid),gCompanies[rowid][COMPANY_COOWNER])) {
            print("é subdono");
            return 1;
        }
    }
    return 0;
}

/*
    Checks if a company is for sale.
    Returns -1 if invalid company
                                */
stock IsCompanyForSale(rowid) {
    if(IsValidCompany(rowid)) {
        if(!strcmp(gCompanies[rowid][COMPANY_OWNER],DONO_NULL))return 1;
    }
    return 0;
}

/*
    Handles company entrance/leave
    Handles comapny safe entrance
                            */
#define COMPANYENTERDIALOG 800
hook OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
    if(PRESSED(KEY_YES)) {
        new Float:dist,Float:x,Float:y,Float:z;
        new rowid;
        new String:title[64];
        new String:msg[256];
        GetPlayerNearestCompanyPointers(playerid,rowid,dist);
        if(dist<1.0&&dist!=-1) {
            gEnteringCompany[playerid]=rowid;
            if(!GetPlayerVirtualWorld(playerid)) {
                format(title,64,"%s [%d]",gCompanies[rowid][COMPANY_NAME],rowid);
                format(msg,256,"Entrar na empresa\nEntrar no Cofre\n");
                if(IsCompanyForSale(rowid))format(msg,256,"%sComprar empresa",msg);
                else format(msg,256,"%sGerir empresa",msg);
                ShowPlayerDialog(playerid,COMPANYENTERDIALOG,DIALOG_STYLE_LIST,title,msg,"Selecionar","Cancelar");            
                return 1;
            }
            else {
                SetPlayerPosCompany(playerid,rowid,false,false);
                return 1;
            }
        }
    }
    return 1;
}
/*
    Handle company safe leave
                                */
#include <YSI_Coding\y_hooks>
hook OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
    if(PRESSED(KEY_YES)) {
        if(IsPlayerInCompanySafe(playerid)) {
            new Float:x,Float:y,Float:z,Float:dist;
            new rowid;
            rowid=GetPlayerVirtualWorld(playerid);
            GetCompanySafeLocationPtrs(rowid,x,y,z);
            if(GetPlayerDistanceFromPoint(playerid,x,y,z)<1.0) {
                SetPlayerPosCompany(playerid,rowid,false,false);
                SendClientMessage(playerid,COLOR_YELLOW,"Saiste do cofre da empresa!");
                CompanySafeSyncPlayerTxd(playerid,rowid);
            }
        }
    }
    return 1;
}
hook OnDialogResponse(playerid,dialogid,response,listitem,inputtext[]) {
    if(gEnteringCompany[playerid]&&dialogid==COMPANYENTERDIALOG&&response) {
        new rowid;
        rowid=gEnteringCompany[playerid];
        if(listitem==0) { //Enter company interior
            SetPlayerPosCompany(playerid,rowid,true,false);
        }
        if(listitem==1) { // Enter company safe
            SetPlayerPosCompany(playerid,rowid,true,true);
        }
        if(listitem==2) { // Buy company OR manage company
            if(!IsCompanyForSale(rowid)) {
                if(IsPlayerCompanyOwner(playerid,rowid)||IsPlayerCompanyCoowner(playerid,rowid))OpenCompanyMgrMenu(playerid,rowid);
                else SendClientMessage(playerid,COLOR_YELLOW,"Não fazes parte da gerência desta empresa!");
            }
            else {
                if(GetPlayerMoney(playerid)>=COMPANYBASEPRICE) {
                    GivePlayerMoney(playerid,-COMPANYBASEPRICE);
                    format(gCompanies[rowid][COMPANY_OWNER],64,"%s",GetPlayerNameEx(playerid));
                    UpdateCompanyTextLabel(rowid);
                    PrepareSaveCompany(rowid);
                    SendClientMessage(playerid,COLOR_YELLOW,"Empresa adquirida! Para efetuar a gestão, volta a abrir o menu!");
                }
                else SendClientMessage(playerid,COLOR_YELLOW,"Não tens dinheiro suficiente!");
            }
        }
    }
    return 1;
}

/*
    Handles player teleport upon entering a company
    Has a boolean as parameter isSafe to check if it's entering the company's safe or not
    Has a boolean as parameter isInside to check if it's entering inside or noutside.
    */
stock SetPlayerPosCompany(playerid,rowid,isInside,isCompanySafe) {
    new Float:x,Float:y,Float:z;
    new String:msg[255];
    if(isInside) {
        if(!isCompanySafe) {
            SetPlayerInterior(playerid,GetCompanyInteriorId(rowid));
            SetPlayerVirtualWorld(playerid,rowid);
            GetCompanyIntLocationPtrs(rowid,x,y,z);
            SetPlayerPos(playerid,x,y,z);
            format(msg,255,"Bem vindo á empresa %s",gCompanies[rowid][COMPANY_NAME]);
            SendClientMessage(playerid,COLOR_YELLOW,msg);
            return 1;
        }
        else {
            SetPlayerInterior(playerid,ROBBERY_INTERIOR_ID);
            SetPlayerVirtualWorld(playerid,rowid);
            GetCompanySafeLocationPtrs(rowid,x,y,z);
            SetPlayerPos(playerid,x,y,z);
            format(msg,255,"Entraste no cofre da empresa %s",gCompanies[rowid][COMPANY_NAME]);
            CompanySafeSyncPlayerTxd(playerid,rowid);
            SendClientMessage(playerid,COLOR_YELLOW,msg);
            SetPlayerCompanySafe(playerid,1);
            return 1;
        }
    }
    else {
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
        GetCompanyExtLocationPtrs(rowid,x,y,z);
        SetPlayerPos(playerid,x,y,z);
        if(IsPlayerInCompanySafe(playerid))SetPlayerCompanySafe(playerid,0);
        PlayerPlaySound(playerid,0,0.0,0.0,0.0);
        return 1;
    }
}

hook OnPlayerDisconnect(playerid, reason) {
    gEnteringCompany[playerid]=0;
    return 1;
}